// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-11-09 11:37:26.732855 +0800 CST m=+0.077536843

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/member/delete/post": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "会员"
                ],
                "summary": "删除会员",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "用户名",
                        "name": "x-username",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/member/info/get": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "会员"
                ],
                "summary": "获取会员详情",
                "parameters": [
                    {
                        "description": "会员",
                        "name": "member",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Member"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "用户名",
                        "name": "x-username",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/member/list/get": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "会员"
                ],
                "summary": "获取所有会员",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "用户名",
                        "name": "x-username",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/member/update/post": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "会员"
                ],
                "summary": "更新会员",
                "parameters": [
                    {
                        "description": "会员",
                        "name": "member",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Member"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "用户名",
                        "name": "x-username",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/member/upload/post": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "会员"
                ],
                "summary": "上传会员",
                "parameters": [
                    {
                        "description": "会员",
                        "name": "member",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Member"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "用户名",
                        "name": "x-username",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v6/data/config/test/get": {
            "post": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "基础接口"
                ],
                "summary": "测试配置更新",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v6/data/health/check/get": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "基础接口"
                ],
                "summary": "健康检查",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v6/data/redis_command/post": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "基础接口"
                ],
                "summary": "Redis操作",
                "parameters": [
                    {
                        "description": "操作命令列表",
                        "name": "command",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RedisCommandList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Member": {
            "type": "object",
            "required": [
                "age",
                "nickname",
                "sex",
                "username"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "nickname": {
                    "type": "string"
                },
                "sex": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.RedisCommand": {
            "type": "object",
            "required": [
                "method",
                "name"
            ],
            "properties": {
                "arg_list": {
                    "type": "object",
                    "additionalProperties": true
                },
                "args": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.RedisCommandList": {
            "type": "object",
            "required": [
                "command_list"
            ],
            "properties": {
                "command_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RedisCommand"
                    }
                }
            }
        },
        "model.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 0
                },
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
